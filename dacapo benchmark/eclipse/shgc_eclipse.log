[0.003s][info][gc,init] Regions: 3927 x 256K
[0.003s][info][gc,init] Humongous object threshold: 256K
[0.004s][info][gc,init] Max TLAB size: 256K
[0.004s][info][gc,init] GC threads: 1 parallel, 1 concurrent
[0.004s][info][gc     ] Heuristics ergonomically sets -XX:+ExplicitGCInvokesConcurrent
[0.004s][info][gc     ] Heuristics ergonomically sets -XX:+ShenandoahImplicitGCInvokesConcurrent
[0.004s][info][gc,init] Shenandoah GC mode: Snapshot-At-The-Beginning (SATB)
[0.004s][info][gc,init] Shenandoah heuristics: Adaptive
[0.004s][info][gc,ergo] Pacer for Idle. Initial: 20106K, Alloc Tax Rate: 1.0x
[0.004s][info][gc,init] Initialize Shenandoah heap: 62976K initial, 6656K min, 981M max
[0.004s][info][gc,init] Safepointing mechanism: global-page poll
[0.004s][info][gc     ] Using Shenandoah
[0.004s][info][gc,heap,coops] Heap address: 0x00000000c2a40000, size: 981 MB, Compressed Oops mode: 32-bit
[0.008s][info][gc,init      ] Reference processing: serial discovery, serial processing
[0.013s][info][gc           ] Soft Max Heap Size: 981M -> 981M
[2.845s][info][gc           ] Trigger: Explicit GC request (System.gc())
[2.845s][info][gc,ergo      ] Free: 914M, Max: 256K regular, 914M humongous, Frag: 0% external, 0% internal; Reserve: 50432K, Max: 256K
[2.845s][info][gc,start     ] GC(0) Concurrent reset
[2.845s][info][gc,task      ] GC(0) Using 1 of 1 workers for concurrent reset
[2.845s][info][gc,ergo      ] GC(0) Pacer for Reset. Non-Taxable: 981M
[2.846s][info][gc           ] GC(0) Concurrent reset 0.239ms
[2.846s][info][gc,start     ] GC(0) Pause Init Mark (process weakrefs) (unload classes)
[2.846s][info][gc,task      ] GC(0) Using 1 of 1 workers for init marking
[2.846s][info][gc,ergo      ] GC(0) Pacer for Mark. Expected Live: 100531K, Free: 914M, Non-Taxable: 93593K, Alloc Tax Rate: 0.1x
[2.846s][info][gc           ] GC(0) Pause Init Mark (process weakrefs) (unload classes) 0.433ms
[2.846s][info][gc,start     ] GC(0) Concurrent marking (process weakrefs) (unload classes)
[2.846s][info][gc,task      ] GC(0) Using 1 of 1 workers for concurrent marking
[2.858s][info][gc           ] GC(0) Concurrent marking (process weakrefs) (unload classes) 12.074ms
[2.858s][info][gc,start     ] GC(0) Concurrent precleaning
[2.858s][info][gc,task      ] GC(0) Using 1 of 1 workers for concurrent preclean
[2.858s][info][gc,ergo      ] GC(0) Pacer for Precleaning. Non-Taxable: 981M
[2.858s][info][gc           ] GC(0) Concurrent precleaning 0.216ms
[2.859s][info][gc,start     ] GC(0) Pause Final Mark (process weakrefs) (unload classes)
[2.859s][info][gc,task      ] GC(0) Using 1 of 1 workers for final marking
[2.869s][info][gc,stringtable] GC(0) Cleaned string and symbol table, strings: 7455 processed, 0 removed, symbols: 18052 processed, 1 removed
[2.870s][info][gc,ergo       ] GC(0) Adaptive CSet Selection. Target Free: 139M, Actual Free: 964M, Max CSet: 41879K, Min Garbage: 0B
[2.870s][info][gc,ergo       ] GC(0) Collectable Garbage: 15920K (99%), Immediate: 1478K (9%), CSet: 14441K (90%)
[2.870s][info][gc,ergo       ] GC(0) Pacer for Evacuation. Used CSet: 16896K, Free: 915M, Non-Taxable: 93747K, Alloc Tax Rate: 1.1x
[2.871s][info][gc            ] GC(0) Pause Final Mark (process weakrefs) (unload classes) 11.975ms
[2.871s][info][gc,start      ] GC(0) Concurrent cleanup
[2.871s][info][gc            ] GC(0) Concurrent cleanup 18M->17M(62M) 0.792ms
[2.872s][info][gc,ergo       ] GC(0) Free: 915M, Max: 256K regular, 914M humongous, Frag: 1% external, 0% internal; Reserve: 49855K, Max: 256K
[2.872s][info][gc,start      ] GC(0) Concurrent evacuation
[2.872s][info][gc,task       ] GC(0) Using 1 of 1 workers for concurrent evacuation
[2.875s][info][gc            ] GC(0) Concurrent evacuation 2.725ms
[2.875s][info][gc,start      ] GC(0) Pause Init Update Refs
[2.875s][info][gc,ergo       ] GC(0) Pacer for Update Refs. Used: 20223K, Free: 915M, Non-Taxable: 93721K, Alloc Tax Rate: 1.1x
[2.875s][info][gc            ] GC(0) Pause Init Update Refs 0.039ms
[2.875s][info][gc,start      ] GC(0) Concurrent update references
[2.875s][info][gc,task       ] GC(0) Using 1 of 1 workers for concurrent reference update
[2.877s][info][gc            ] GC(0) Concurrent update references 2.365ms
[2.877s][info][gc,start      ] GC(0) Pause Final Update Refs
[2.877s][info][gc,task       ] GC(0) Using 1 of 1 workers for final reference update
[2.877s][info][gc            ] GC(0) Pause Final Update Refs 0.149ms
[2.877s][info][gc,start      ] GC(0) Concurrent cleanup
[2.877s][info][gc            ] GC(0) Concurrent cleanup 19M->3M(64M) 0.182ms
[2.877s][info][gc,ergo       ] Free: 929M, Max: 256K regular, 915M humongous, Frag: 2% external, 0% internal; Reserve: 50432K, Max: 256K
[2.878s][info][gc,stats      ] 
[2.878s][info][gc,stats      ] All times are wall-clock times, except per-root-class counters, that are sum over
[2.878s][info][gc,stats      ] all workers. Dividing the <total> over the root stage time estimates parallelism.
[2.878s][info][gc,stats      ] 
[2.878s][info][gc,stats      ] Concurrent Reset                    174 us
[2.878s][info][gc,stats      ] Pause Init Mark (G)                 502 us
[2.878s][info][gc,stats      ] Pause Init Mark (N)                 412 us
[2.878s][info][gc,stats      ]   Accumulate Stats                    2 us
[2.878s][info][gc,stats      ]   Make Parsable                       2 us
[2.878s][info][gc,stats      ]   Update Region States               15 us
[2.878s][info][gc,stats      ]   Scan Roots                        350 us, parallelism: 0.97x
[2.878s][info][gc,stats      ]     S: <total>                      338 us
[2.878s][info][gc,stats      ]     S: Thread Roots                 209 us, workers (us): 209, 
[2.878s][info][gc,stats      ]     S: Universe Roots                10 us, workers (us):  10, 
[2.878s][info][gc,stats      ]     S: JNI Handles Roots              2 us, workers (us):   2, 
[2.878s][info][gc,stats      ]     S: Synchronizer Roots             0 us, workers (us):   0, 
[2.883s][info][gc,stats      ]     S: Management Roots               1 us, workers (us):   1, 
[2.883s][info][gc,stats      ]     S: System Dict Roots             17 us, workers (us):  17, 
[2.883s][info][gc,stats      ]     S: CLDG Roots                    99 us, workers (us):  99, 
[2.883s][info][gc,stats      ]     S: JVMTI Roots                    0 us, workers (us):   0, 
[2.883s][info][gc,stats      ]   Resize TLABs                        1 us
[2.883s][info][gc,stats      ] Concurrent Marking                12054 us
[2.883s][info][gc,stats      ] Concurrent Precleaning              198 us
[2.883s][info][gc,stats      ] Pause Final Mark (G)              12037 us
[2.883s][info][gc,stats      ] Pause Final Mark (N)              11953 us
[2.883s][info][gc,stats      ]   Finish Queues                      10 us
[2.883s][info][gc,stats      ]   Weak References                    49 us
[2.883s][info][gc,stats      ]     Process                          47 us
[2.883s][info][gc,stats      ]   System Purge                       96 us
[2.883s][info][gc,stats      ]     Unload Classes                  120 us
[2.883s][info][gc,stats      ]     Cleanup                       10219 us, parallelism: 0.21x
[2.883s][info][gc,stats      ]       CU: <total>                  2128 us
[2.883s][info][gc,stats      ]       CU: Code Cache Roots          764 us, workers (us): 764, 
[2.883s][info][gc,stats      ]       CU: Code Cache Cleaning       139 us, workers (us): 139, 
[2.883s][info][gc,stats      ]       CU: String Table Roots        433 us, workers (us): 433, 
[2.883s][info][gc,stats      ]       CU: Resolved Table Roots        3 us, workers (us):   3, 
[2.883s][info][gc,stats      ]       CU: CLDG Roots                789 us, workers (us): 789, 
[2.883s][info][gc,stats      ]     Weak Roots                       96 us
[2.883s][info][gc,stats      ]     CLDG                            477 us
[2.883s][info][gc,stats      ]   Update Region States               55 us
[2.883s][info][gc,stats      ]   Retire TLABs                        3 us
[2.883s][info][gc,stats      ]   Choose Collection Set              71 us
[2.883s][info][gc,stats      ]   Rebuild Free Set                   15 us
[2.883s][info][gc,stats      ]   Initial Evacuation                824 us, parallelism: 0.63x
[2.883s][info][gc,stats      ]     E: <total>                      522 us
[2.883s][info][gc,stats      ]     E: Thread Roots                  32 us, workers (us):  32, 
[2.883s][info][gc,stats      ]     E: Code Cache Roots             280 us, workers (us): 280, 
[2.883s][info][gc,stats      ]     E: Universe Roots                18 us, workers (us):  18, 
[2.883s][info][gc,stats      ]     E: JNI Handles Roots              2 us, workers (us):   2, 
[2.883s][info][gc,stats      ]     E: Synchronizer Roots             0 us, workers (us):   0, 
[2.883s][info][gc,stats      ]     E: Management Roots               1 us, workers (us):   1, 
[2.883s][info][gc,stats      ]     E: System Dict Roots              4 us, workers (us):   4, 
[2.883s][info][gc,stats      ]     E: CLDG Roots                   185 us, workers (us): 185, 
[2.883s][info][gc,stats      ]     E: JVMTI Roots                    1 us, workers (us):   1, 
[2.883s][info][gc,stats      ] Concurrent Cleanup                  160 us
[2.883s][info][gc,stats      ] Concurrent Evacuation              2701 us
[2.883s][info][gc,stats      ] Pause Init  Update Refs (G)          84 us
[2.883s][info][gc,stats      ] Pause Init  Update Refs (N)          19 us
[2.883s][info][gc,stats      ]   Retire GCLABs                       1 us
[2.883s][info][gc,stats      ] Concurrent Update Refs             2346 us
[2.883s][info][gc,stats      ] Pause Final Update Refs (G)         216 us
[2.883s][info][gc,stats      ] Pause Final Update Refs (N)         127 us
[2.883s][info][gc,stats      ]   Update Roots                       30 us, parallelism: 0.83x
[2.883s][info][gc,stats      ]     UR: <total>                      25 us
[2.883s][info][gc,stats      ]     UR: Thread Roots                 25 us, workers (us):  25, 
[2.883s][info][gc,stats      ]   Update Region States               54 us
[2.883s][info][gc,stats      ]   Trash Collection Set                3 us
[2.883s][info][gc,stats      ]   Rebuild Free Set                   26 us
[2.883s][info][gc,stats      ] Concurrent Cleanup                  161 us
[2.883s][info][gc,stats      ] 
[2.883s][info][gc,stats      ] Allocation pacing accrued:
[2.883s][info][gc,stats      ]       0 of  2879 ms (  0.0%): <total>
[2.883s][info][gc,stats      ]       0 of  2879 ms (  0.0%): <average total>
[2.883s][info][gc,stats      ] 
[2.883s][info][gc,metaspace  ] Metaspace: 6212K->6210K(1056768K)
[2.883s][info][gc,ergo       ] Pacer for Idle. Initial: 20106K, Alloc Tax Rate: 1.0x
[2.883s][info][gc,start      ] Concurrent uncommit
[2.885s][info][gc            ] Concurrent uncommit 3M->3M(6M) 2.239ms
[3.086s][info][gc            ] Cancelling GC: Stopping VM
[3.087s][info][gc,heap,exit  ] Heap
[3.087s][info][gc,heap,exit  ] Shenandoah Heap
[3.087s][info][gc,heap,exit  ]  981M max, 981M soft max, 6656K committed, 5375K used
[3.087s][info][gc,heap,exit  ]  3927 x 256K regions
[3.087s][info][gc,heap,exit  ] Status: cancelled
[3.087s][info][gc,heap,exit  ] Reserved region:
[3.088s][info][gc,heap,exit  ]  - [0x00000000c2a40000, 0x0000000100000000) 
[3.088s][info][gc,heap,exit  ] Collection set:
[3.088s][info][gc,heap,exit  ]  - map (vanilla): 0x00000000000130a9
[3.088s][info][gc,heap,exit  ]  - map (biased):  0x0000000000010000
[3.088s][info][gc,heap,exit  ] 
[3.088s][info][gc,heap,exit  ]  Metaspace       used 6396K, capacity 7204K, committed 7424K, reserved 1056768K
[3.088s][info][gc,heap,exit  ]   class space    used 600K, capacity 723K, committed 768K, reserved 1048576K
[3.088s][info][gc,stats      ] 
[3.088s][info][gc,stats      ] GC STATISTICS:
[3.088s][info][gc,stats      ]   "(G)" (gross) pauses include VM time: time to notify and block threads, do the pre-
[3.088s][info][gc,stats      ]         and post-safepoint housekeeping. Use -XX:+PrintSafepointStatistics to dissect.
[3.088s][info][gc,stats      ]   "(N)" (net) pauses are the times spent in the actual GC code.
[3.088s][info][gc,stats      ]   "a" is average time for each phase, look at levels to see if average makes sense.
[3.088s][info][gc,stats      ]   "lvls" are quantiles: 0% (minimum), 25%, 50% (median), 75%, 100% (maximum).
[3.088s][info][gc,stats      ] 
[3.088s][info][gc,stats      ]   All times are wall-clock times, except per-root-class counters, that are sum over
[3.088s][info][gc,stats      ]   all workers. Dividing the <total> over the root stage time estimates parallelism.
[3.088s][info][gc,stats      ] 
[3.088s][info][gc,stats      ]   Pacing delays are measured from entering the pacing code till exiting it. Therefore,
[3.088s][info][gc,stats      ]   observed pacing delays may be higher than the threshold when paced thread spent more
[3.088s][info][gc,stats      ]   time in the pacing code. It usually happens when thread is de-scheduled while paced,
[3.088s][info][gc,stats      ]   OS takes longer to unblock the thread, or JVM experiences an STW pause.
[3.088s][info][gc,stats      ] 
[3.088s][info][gc,stats      ]   Higher delay would prevent application outpacing the GC, but it will hide the GC latencies
[3.088s][info][gc,stats      ]   from the STW pause times. Pacing affects the individual threads, and so it would also be
[3.088s][info][gc,stats      ]   invisible to the usual profiling tools, but would add up to end-to-end application latency.
[3.088s][info][gc,stats      ]   Raise max pacing delay with care.
[3.088s][info][gc,stats      ] 
[3.088s][info][gc,stats      ] Concurrent Reset               =    0.000 s (a =      174 us) (n =     1) (lvls, us =      172,      172,      172,      172,      174)
[3.088s][info][gc,stats      ] Pause Init Mark (G)            =    0.001 s (a =      502 us) (n =     1) (lvls, us =      500,      500,      500,      500,      502)
[3.088s][info][gc,stats      ] Pause Init Mark (N)            =    0.000 s (a =      412 us) (n =     1) (lvls, us =      410,      410,      410,      410,      412)
[3.088s][info][gc,stats      ]   Accumulate Stats             =    0.000 s (a =        2 us) (n =     1) (lvls, us =        2,        2,        2,        2,        2)
[3.088s][info][gc,stats      ]   Make Parsable                =    0.000 s (a =        2 us) (n =     1) (lvls, us =        2,        2,        2,        2,        2)
[3.088s][info][gc,stats      ]   Update Region States         =    0.000 s (a =       15 us) (n =     1) (lvls, us =       15,       15,       15,       15,       15)
[3.088s][info][gc,stats      ]   Scan Roots                   =    0.000 s (a =      350 us) (n =     1) (lvls, us =      350,      350,      350,      350,      350)
[3.088s][info][gc,stats      ]     S: <total>                 =    0.000 s (a =      338 us) (n =     1) (lvls, us =      338,      338,      338,      338,      338)
[3.088s][info][gc,stats      ]     S: Thread Roots            =    0.000 s (a =      209 us) (n =     1) (lvls, us =      209,      209,      209,      209,      209)
[3.088s][info][gc,stats      ]     S: Universe Roots          =    0.000 s (a =       10 us) (n =     1) (lvls, us =       10,       10,       10,       10,       10)
[3.088s][info][gc,stats      ]     S: JNI Handles Roots       =    0.000 s (a =        2 us) (n =     1) (lvls, us =        2,        2,        2,        2,        2)
[3.088s][info][gc,stats      ]     S: Synchronizer Roots      =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[3.088s][info][gc,stats      ]     S: Management Roots        =    0.000 s (a =        1 us) (n =     1) (lvls, us =        1,        1,        1,        1,        1)
[3.088s][info][gc,stats      ]     S: System Dict Roots       =    0.000 s (a =       17 us) (n =     1) (lvls, us =       17,       17,       17,       17,       17)
[3.088s][info][gc,stats      ]     S: CLDG Roots              =    0.000 s (a =       99 us) (n =     1) (lvls, us =       99,       99,       99,       99,       99)
[3.088s][info][gc,stats      ]     S: JVMTI Roots             =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[3.088s][info][gc,stats      ]   Resize TLABs                 =    0.000 s (a =        1 us) (n =     1) (lvls, us =        1,        1,        1,        1,        1)
[3.088s][info][gc,stats      ] Concurrent Marking             =    0.012 s (a =    12054 us) (n =     1) (lvls, us =    11914,    11914,    11914,    11914,    12054)
[3.088s][info][gc,stats      ] Concurrent Precleaning         =    0.000 s (a =      198 us) (n =     1) (lvls, us =      197,      197,      197,      197,      198)
[3.088s][info][gc,stats      ] Pause Final Mark (G)           =    0.012 s (a =    12037 us) (n =     1) (lvls, us =    11914,    11914,    11914,    11914,    12037)
[3.088s][info][gc,stats      ] Pause Final Mark (N)           =    0.012 s (a =    11953 us) (n =     1) (lvls, us =    11914,    11914,    11914,    11914,    11953)
[3.088s][info][gc,stats      ]   Finish Queues                =    0.000 s (a =       10 us) (n =     1) (lvls, us =       10,       10,       10,       10,       10)
[3.088s][info][gc,stats      ]   Weak References              =    0.000 s (a =       49 us) (n =     1) (lvls, us =       49,       49,       49,       49,       49)
[3.088s][info][gc,stats      ]     Process                    =    0.000 s (a =       47 us) (n =     1) (lvls, us =       47,       47,       47,       47,       47)
[3.088s][info][gc,stats      ]   System Purge                 =    0.000 s (a =       96 us) (n =     1) (lvls, us =       96,       96,       96,       96,       96)
[3.088s][info][gc,stats      ]     Unload Classes             =    0.000 s (a =      120 us) (n =     1) (lvls, us =      119,      119,      119,      119,      120)
[3.088s][info][gc,stats      ]     Cleanup                    =    0.010 s (a =    10219 us) (n =     1) (lvls, us =    10156,    10156,    10156,    10156,    10219)
[3.088s][info][gc,stats      ]       CU: <total>              =    0.002 s (a =     2128 us) (n =     1) (lvls, us =     2109,     2109,     2109,     2109,     2128)
[3.088s][info][gc,stats      ]       CU: Code Cache Roots     =    0.001 s (a =      764 us) (n =     1) (lvls, us =      764,      764,      764,      764,      764)
[3.088s][info][gc,stats      ]       CU: Code Cache Cleaning  =    0.000 s (a =      139 us) (n =     1) (lvls, us =      139,      139,      139,      139,      139)
[3.088s][info][gc,stats      ]       CU: String Table Roots   =    0.000 s (a =      433 us) (n =     1) (lvls, us =      432,      432,      432,      432,      433)
[3.088s][info][gc,stats      ]       CU: Resolved Table Roots =    0.000 s (a =        3 us) (n =     1) (lvls, us =        3,        3,        3,        3,        3)
[3.088s][info][gc,stats      ]       CU: CLDG Roots           =    0.001 s (a =      789 us) (n =     1) (lvls, us =      787,      787,      787,      787,      789)
[3.089s][info][gc,stats      ]     Weak Roots                 =    0.000 s (a =       96 us) (n =     1) (lvls, us =       96,       96,       96,       96,       96)
[3.089s][info][gc,stats      ]     CLDG                       =    0.000 s (a =      477 us) (n =     1) (lvls, us =      477,      477,      477,      477,      477)
[3.089s][info][gc,stats      ]   Update Region States         =    0.000 s (a =       55 us) (n =     1) (lvls, us =       55,       55,       55,       55,       55)
[3.089s][info][gc,stats      ]   Retire TLABs                 =    0.000 s (a =        3 us) (n =     1) (lvls, us =        2,        2,        2,        2,        3)
[3.089s][info][gc,stats      ]   Choose Collection Set        =    0.000 s (a =       71 us) (n =     1) (lvls, us =       71,       71,       71,       71,       71)
[3.089s][info][gc,stats      ]   Rebuild Free Set             =    0.000 s (a =       15 us) (n =     1) (lvls, us =       15,       15,       15,       15,       15)
[3.089s][info][gc,stats      ]   Initial Evacuation           =    0.001 s (a =      824 us) (n =     1) (lvls, us =      822,      822,      822,      822,      824)
[3.089s][info][gc,stats      ]     E: <total>                 =    0.001 s (a =      522 us) (n =     1) (lvls, us =      521,      521,      521,      521,      522)
[3.089s][info][gc,stats      ]     E: Thread Roots            =    0.000 s (a =       32 us) (n =     1) (lvls, us =       31,       31,       31,       31,       32)
[3.089s][info][gc,stats      ]     E: Code Cache Roots        =    0.000 s (a =      280 us) (n =     1) (lvls, us =      279,      279,      279,      279,      280)
[3.089s][info][gc,stats      ]     E: Universe Roots          =    0.000 s (a =       18 us) (n =     1) (lvls, us =       18,       18,       18,       18,       18)
[3.089s][info][gc,stats      ]     E: JNI Handles Roots       =    0.000 s (a =        2 us) (n =     1) (lvls, us =        2,        2,        2,        2,        2)
[3.089s][info][gc,stats      ]     E: Synchronizer Roots      =    0.000 s (a =        0 us) (n =     1) (lvls, us =        0,        0,        0,        0,        0)
[3.089s][info][gc,stats      ]     E: Management Roots        =    0.000 s (a =        1 us) (n =     1) (lvls, us =        1,        1,        1,        1,        1)
[3.089s][info][gc,stats      ]     E: System Dict Roots       =    0.000 s (a =        4 us) (n =     1) (lvls, us =        4,        4,        4,        4,        4)
[3.089s][info][gc,stats      ]     E: CLDG Roots              =    0.000 s (a =      185 us) (n =     1) (lvls, us =      184,      184,      184,      184,      185)
[3.089s][info][gc,stats      ]     E: JVMTI Roots             =    0.000 s (a =        1 us) (n =     1) (lvls, us =        1,        1,        1,        1,        1)
[3.089s][info][gc,stats      ] Concurrent Cleanup             =    0.000 s (a =      160 us) (n =     1) (lvls, us =      160,      160,      160,      160,      160)
[3.089s][info][gc,stats      ] Concurrent Evacuation          =    0.003 s (a =     2701 us) (n =     1) (lvls, us =     2695,     2695,     2695,     2695,     2701)
[3.089s][info][gc,stats      ] Pause Init  Update Refs (G)    =    0.000 s (a =       84 us) (n =     1) (lvls, us =       84,       84,       84,       84,       84)
[3.089s][info][gc,stats      ] Pause Init  Update Refs (N)    =    0.000 s (a =       19 us) (n =     1) (lvls, us =       19,       19,       19,       19,       19)
[3.089s][info][gc,stats      ]   Retire GCLABs                =    0.000 s (a =        1 us) (n =     1) (lvls, us =        1,        1,        1,        1,        1)
[3.089s][info][gc,stats      ] Concurrent Update Refs         =    0.002 s (a =     2346 us) (n =     1) (lvls, us =     2344,     2344,     2344,     2344,     2346)
[3.089s][info][gc,stats      ] Pause Final Update Refs (G)    =    0.000 s (a =      216 us) (n =     1) (lvls, us =      215,      215,      215,      215,      216)
[3.089s][info][gc,stats      ] Pause Final Update Refs (N)    =    0.000 s (a =      127 us) (n =     1) (lvls, us =      125,      125,      125,      125,      127)
[3.089s][info][gc,stats      ]   Update Roots                 =    0.000 s (a =       30 us) (n =     1) (lvls, us =       30,       30,       30,       30,       30)
[3.092s][info][gc,stats      ]     UR: <total>                =    0.000 s (a =       25 us) (n =     1) (lvls, us =       25,       25,       25,       25,       25)
[3.092s][info][gc,stats      ]     UR: Thread Roots           =    0.000 s (a =       25 us) (n =     1) (lvls, us =       25,       25,       25,       25,       25)
[3.092s][info][gc,stats      ]   Update Region States         =    0.000 s (a =       54 us) (n =     1) (lvls, us =       54,       54,       54,       54,       54)
[3.092s][info][gc,stats      ]   Trash Collection Set         =    0.000 s (a =        3 us) (n =     1) (lvls, us =        3,        3,        3,        3,        3)
[3.092s][info][gc,stats      ]   Rebuild Free Set             =    0.000 s (a =       26 us) (n =     1) (lvls, us =       26,       26,       26,       26,       26)
[3.092s][info][gc,stats      ] Concurrent Cleanup             =    0.000 s (a =      161 us) (n =     1) (lvls, us =      160,      160,      160,      160,      161)
[3.092s][info][gc,stats      ] Concurrent Uncommit            =    0.002 s (a =     2229 us) (n =     1) (lvls, us =     2227,     2227,     2227,     2227,     2229)
[3.092s][info][gc,stats      ] 
[3.092s][info][gc,stats      ] 
[3.092s][info][gc,stats      ] Under allocation pressure, concurrent cycles may cancel, and either continue cycle
[3.092s][info][gc,stats      ] under stop-the-world pause or result in stop-the-world Full GC. Increase heap size,
[3.092s][info][gc,stats      ] tune GC heuristics, set more aggressive pacing delay, or lower allocation rate
[3.092s][info][gc,stats      ] to avoid Degenerated and Full GC cycles.
[3.092s][info][gc,stats      ] 
[3.092s][info][gc,stats      ]     1 successful concurrent GCs
[3.092s][info][gc,stats      ]       1 invoked explicitly
[3.092s][info][gc,stats      ]       0 invoked implicitly
[3.092s][info][gc,stats      ] 
[3.092s][info][gc,stats      ]     0 Degenerated GCs
[3.092s][info][gc,stats      ]       0 caused by allocation failure
[3.092s][info][gc,stats      ]       0 upgraded to Full GC
[3.092s][info][gc,stats      ] 
[3.092s][info][gc,stats      ]     0 Full GCs
[3.092s][info][gc,stats      ]       0 invoked explicitly
[3.092s][info][gc,stats      ]       0 invoked implicitly
[3.092s][info][gc,stats      ]       0 caused by allocation failure
[3.092s][info][gc,stats      ]       0 upgraded from Degenerated GC
[3.092s][info][gc,stats      ] 
[3.092s][info][gc,stats      ] 
